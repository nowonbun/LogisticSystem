DROP DATABASE HOUSEHOLD;
CREATE DATABASE HOUSEHOLD;
USE HOUSEHOLD;

CREATE TABLE MST_LOW_CATEGORY(
	CODE CHAR(1) NOT NULL,
	NAME NVARCHAR(255) NOT NULL,
	ISDELETED BIT DEFAULT 0 NOT NULL,

	PRIMARY KEY(CODE)
);

CREATE TABLE TSN_CATEGORY(
	IDX INT NOT NULL AUTO_INCREMENT,
	LOWCATEGORYCODE CHAR(1) NOT NULL,
	NAME NVARCHAR(255) NOT NULL,
	ISDELETED BIT DEFAULT 0 NOT NULL,

	PRIMARY KEY(IDX),
	FOREIGN KEY (LOWCATEGORYCODE) REFERENCES MST_LOW_CATEGORY (CODE)
);

CREATE TABLE MST_GROUP(
	CODE CHAR(1) NOT NULL,
	NAME NVARCHAR(255) NOT NULL,
	ISDEFAULT BIT DEFAULT 0 NOT NULL,
	ISDELETED BIT DEFAULT 0 NOT NULL,

	PRIMARY KEY(CODE)
);

CREATE TABLE TSN_USER(
	ID VARCHAR(255) NOT NULL,
	EMAIL varchar(255) NOT NULL,
	NAME NVARCHAR(255) NOT NULL,	
	CREATEDDATE DATETIME DEFAULT NOW() NOT NULL,
	ISDELTED BIT DEFAULT 0 NOT NULL,

	PRIMARY KEY(ID)
);

CREATE TABLE MAP_USER_GROUP(
	ID VARCHAR(100) NOT NULL,
	CODE CHAR(1) NOT NULL,
	
	PRIMARY KEY (ID,CODE),
	FOREIGN KEY (ID) REFERENCES TSN_USER(ID),
	FOREIGN KEY (CODE) REFERENCES MST_GROUP(CODE)
);

CREATE TABLE MST_ViewRole(
	CODE CHAR(4) NOT NULL,
	NAME NVARCHAR(255) NOT NULL,
	
	PRIMARY KEY (CODE)
);

CREATE TABLE MST_ACTIONROLE(
	CODE CHAR(4) NOT NULL,
	NAME NVARCHAR(255) NOT NULL,
	
	PRIMARY KEY (CODE)
);

-- If it have not map of role by view, that is all permission.
CREATE TABLE MAP_VIEW_ROLE_GROUP(
	VIEWCODE CHAR(4) NOT NULL,
	GROUPCODE CHAR(1) NOT NULL,
	
	PRIMARY KEY (VIEWCODE,GROUPCODE),
	FOREIGN KEY (VIEWCODE) REFERENCES MST_VIEWROLE(CODE),
	FOREIGN KEY (GROUPCODE) REFERENCES MST_GROUP(CODE)
);

-- If it have not map of role by view, that is all permission.
CREATE TABLE MAP_VIEW_ROLE_USER(
	VIEWCODE CHAR(4) NOT NULL,
	ID VARCHAR(100) NOT NULL,
	
	PRIMARY KEY (VIEWCODE,ID),
	FOREIGN KEY (VIEWCODE) REFERENCES MST_VIEWROLE(CODE),
	FOREIGN KEY (ID) REFERENCES TSN_USER(ID)
);

-- If it have not map of role by action, that is all permission.
CREATE TABLE MAP_ACTION_ROLE_GROUP(
	ROLECODE CHAR(4) NOT NULL,
	GROUPCODE CHAR(1) NOT NULL,
	
	PRIMARY KEY (ROLECODE,GROUPCODE),
	FOREIGN KEY (ROLECODE) REFERENCES MST_ACTIONROLE(CODE),
	FOREIGN KEY (GROUPCODE) REFERENCES MST_GROUP(CODE)
);

-- If it have not map of role by action, that is all permission.
CREATE TABLE MAP_ACTION_ROLE_USER(
	ROLECODE CHAR(4) NOT NULL,
	ID VARCHAR(100) NOT NULL,
	
	PRIMARY KEY (ROLECODE,ID),
	FOREIGN KEY (ROLECODE) REFERENCES MST_ACTIONROLE(CODE),
	FOREIGN KEY (ID) REFERENCES TSN_USER(ID)
);

-- Permission map condition is next:
-- Group was had in Map_Group, User in its group was had in Map_User -> all user in group can access. it has not mean.
-- Group was not had in Map_Group, User in its group was had in Map_User -> only user can access the rule. the group can not be.
-- example SQL;
-- SELECT role.CODE,user.EmailId  
--		FROM MST_ViewRole role INNER JOIN MAP_VIEW_ROLE_GROUP map ON role.CODE = map.ViewCode
--							   INNER JOIN MAP_USER_GROUP groupmap ON map.GroupId = groupmap.GroupId
--							   INNER JOIN TSN_User user ON groupmap.GroupId = user.EmailId
-- UNION
-- SELECT role.CODE,user.EmailId 
--		FROM MST_ViewRole role INNER JOIN MAP_VIEW_ROLE_USER map ON role.CODE = map.ViewCode
--							   INNER JOIN TSN_User user ON map.EmailId = user.EmailId;

CREATE TABLE TSN_PAYMENT(
	IDX INT NOT NULL AUTO_INCREMENT,
	LOWCATEGORYCODE CHAR(1) NOT NULL,
	CATEGORYKEY INT NOT NULL,
	CONTENTS NVARCHAR(255),
	MONEY DECIMAL(20) NOT NULL,
	COMMENT NVARCHAR(255),
	GROUPCODE CHAR(1) NOT NULL,
	ISDELETED BIT DEFAULT 0 NOT NULL,
	CREATEDDATE DATETIME DEFAULT NOW() NOT NULL,
	CREATER VARCHAR(255) NOT NULL,
	UPDATEDDATE DATETIME NULL,
	UPDATER VARCHAR(255) NULL,

	PRIMARY KEY(IDX),
	FOREIGN KEY (LOWCATEGORYCODE) REFERENCES MST_LOW_CATEGORY (CODE),
	FOREIGN KEY (CATEGORYKEY) REFERENCES TSN_CATEGORY (IDX),
	FOREIGN KEY (GROUPCODE) REFERENCES MST_GROUP (CODE),
	FOREIGN KEY (CREATER) REFERENCES TSN_USER (ID),
	FOREIGN KEY (UPDATER) REFERENCES TSN_USER (ID)
);
